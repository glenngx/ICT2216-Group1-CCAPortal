name: Flask UI + Unit Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DB_CONN_STRING: ${{ secrets.DB_CONN_STRING }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      TESTING: "1"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Microsoft ODBC Driver 18 for SQL Server
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          sudo apt-add-repository "$(curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list)"
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 unixodbc-dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Debug - Show Current Directory
        run: ls -lah

      - name: Create config.py with encoded connection string
        run: |
          echo 'import os' > config.py
          echo 'import urllib.parse' >> config.py
          echo '' >> config.py
          echo 'class Config:' >> config.py
          echo '    raw_odbc = os.getenv("DB_CONN_STRING")' >> config.py
          echo '    if not raw_odbc:' >> config.py
          echo '        raise ValueError("❌ Missing DB_CONN_STRING")' >> config.py
          echo '    SQLALCHEMY_DATABASE_URI = "mssql+pyodbc:///?odbc_connect=" + urllib.parse.quote_plus(raw_odbc)' >> config.py
          echo '    SQLALCHEMY_TRACK_MODIFICATIONS = False' >> config.py
          echo '    SESSION_TYPE = os.getenv("SESSION_TYPE", "sqlalchemy")' >> config.py
          echo '    SECRET_KEY = os.getenv("SECRET_KEY") or "fallback-secret"' >> config.py

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install selenium webdriver-manager

      - name: Start Flask App
        run: |
          nohup python app.py > nohup.out 2>&1 &
          sleep 5

      - name: Check Flask Logs After Start
        run: |
          echo "==== Flask Log (nohup.out) ===="
          cat nohup.out || echo "No nohup.out file found"

      - name: Wait for Flask to respond
        run: |
          for i in {1..10}; do
            echo "Checking Flask..."
            curl -s http://localhost:5000/health && break || sleep 3
          done

      - name: Run Login Validation Test
        run: pytest -v --capture=tee-sys tests/LoginValidation_Test.py
      - name: Run User Voting Test
        run: pytest -v --capture=tee-sys tests/AddingUserToCCA_Test.py
      - name: Run Adding User To CCA Test
        run: pytest -v --capture=tee-sys tests/UserVoting_Test.py
